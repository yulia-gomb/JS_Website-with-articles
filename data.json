{
  "tags": [
    "Angular", "Design", "SAP ABAP", "Product Development", "Web Design", "SAP TM Consultant",
    "DevOps", "UX/UI Design", "Android", "Frontend", "Java", "Programmer", "Python"
  ],
  "articles": [
    {
      "id": 1,
      "title": "High quality",
      "description": "Straightforward APIs with consistent cross platform behaviour..",
      "img": "img/article1.png",
      "author": "Pascal Precht",
      "date": "February 2, 2021",
      "tags": ["Angular", "Frontend", "Product Development", "UX/UI Design"],
      "subtitles": ["Making your Angular apps fast",
      "Measuring the app’s performance",
      "Using a simpler NgFor"],
      "text": ["Angular claims to be very fast by default. What does “fast” really mean? Of course, this always depends on the context. What does our application do? How many different things is it doing at a certain point? How is our application’s component tree structured and how many bindings does it introduce? This and other questions come into play when trying to figure out, how we can make our applications faster.",
      "We’re interested in runtime performance and how long it takes Angular to perform a task when the mousemove event has been fired, as this is the work Angular has to do when we drag and drop a box.Measuring these kind of things nowadays is fairly easy. Chrome’s devtools for example come with an excellent Timeline Tool that lets us profile JavaScript execution and paint times per frame in the browser with a couple of mouse clicks.",
      "Another thing that is rather not obvious in our demo, is that NgFor might take up more time than it should. Now, what does that mean? Well, if we take a look at NgFor’s source code, we can see that it not only creates DOM items it iterates through, it also keeps track of the position of each item, in case things have been moved around. This is great for animations as we can animate-in and -out naturally."]
    },
    {
      "id": 2,
      "title": "How to RxJS in Angular",
      "description": "As the values of your component inputs change over time, you may want to do something with that data inside your component.",
      "img": "img/article2.png",
      "author": "Dominic Elm",
      "date": "July 4, 2021",
      "tags": ["SAP ABAP", "Programmer", "SAP TM Consultant", "Angular"],
      "subtitles": ["Advanced caching with RxJS", "Motivation", "The Requirements"],
      "text": ["When building web applications, performance should always be a top priority. There are many things we can do to speed up our Angular applications like tree-shaking, AoT (ahead-of-time compilation), lazy loading modules or caching. To get an overview of practices that will help you boost the performance of your Angular applications, we highly recommend you to check out the Angular Performance Checklist by Minko Gechev. In this post we focus on caching.",
      "Every now and then there’s this question popping up how to cache data in an Angular application that makes excessive use of Observables. Most people have a good understanding on how to cache data with Promises but feel overwhelmed when it comes to functional reactive programming, due to its complexity (large API), fundamental shift in mindset (from imperative to declarative) and the multitude of concepts. Hence, it can be hard to actually translate an existing caching mechanism based on Promises to Observables, especially if you want that mechanism to be a little bit more advanced.",
      "Before we dive into code, let’s start to define the requirements for our advanced caching mechanism. We want to build an application called World of Jokes. It’s a simple app that randomly shows jokes for a given category. To keep it simple and focused, there’s only one category. This app has three components: AppComponent, DashboardComponent and JokeListComponent. The AppComponent is our entry point and renders a toolbar as well as a <router-outlet> that is filled based on the current router state.\n\nThe DashboardComponent simply shows a list of categories. From here, we can navigate to the JokeListComponent which then renders a list of jokes onto the screen."]
    },
    {
      "id": 3,
      "title": "Top 15 Features of Angular",
      "description": "It has added the information for the dependency and also regarding the ng-content selections for the data.",
      "img": "img/article3.png",
      "author": "Adam Smith",
      "date": "June 17, 2021",
      "tags": ["Angular", "Programmer", "Java"],
      "subtitles": ["Addition of Dependency Injection","Merging of Multiple Transition File",
      "Generic with ModuleWithProviders"],
      "text": ["It has added the information for the dependency and also regarding the ng-content selections for the data. It helps in wrapping the ng content selections and can help in checking files by creating scripts and using various interfaces. This would help us provide additional data that can be used in tools like Angular language services, which offers the functionality to offer suggestions and hints for the components or methods pre-defined in built-in libraries.",
      "Following the convention, earlier, it was possible to merge only one translation file per program. But, after the release of new features of Angular 10, it is possible to combine multiple files in a single go. Also, this transaction of the files will be made possible via messaging functionalities.",
      "Ihe use of generic keywords has been made mandatory with the ModuleWithProviders in this version of Angular 10. This requirement has aroused to make the ModuleWithProviders patterns work with the Ivy compiling and rendering sequence. Before this implementation, the View layer of the MVC architecture has provided the facility with the ability to omit the generic keyword to be used with the ModuleWithProviders. Again, a developer may want to use the View layer, and that might be dependent on the library that needs a generic type parameter to be included. Here, ngcc could be of no help, and only the application logic code would be migrated, resulting in the library’s fixation by its native author.To prevent this, skipLibChecks can be disabled by setting its binary value to false in config or while application update for using Ivy."]
    },
    {
      "id": 4,
      "title": "Angular team streamlines feature requests",
      "description": "Feature requests will be reviewed for alignment with existing projects on the Angular roadmap.",
      "img": "img/article4.png",
      "author": "Michael Willson",
      "date": "March 8, 2020",
      "tags": ["Product Development", "DevOps", "Python", "Android" ],
      "subtitles": ["References in Rust", "What are references again?", "Dereferencing References" ],
      "text": ["If you’ve read our article on Rust’s Ownership or if you’ve written your first few programs and wondered what’s the difference between String and &str, you’re most likely aware that there’s the notion of references in Rust. References enable us to give things like functions an data structures access to values, without transferring ownership. Or, in other words, without moving them. In this article we’re going to explore references a bit further and take a closer look at some interesting characteristics.",
      "While it may occur unexpected, it actually makes perfect sense. Rust claims to be memory safe and one of the things that make this claim true, is that there can’t be multiple mutable references to the same data. Allowing multiple such references in different parts of the code, there’d be no guarantee that one of them won’t mutate the data in an unexpected way.On the other hand though, it’s possible to have as many shared references of the same data as needed. So assuming p and r aren’t mutable, doing this would be totally fine.",
      "Notice that, even though we’re working with a reference, we didn’t have to use the *-operator to access the first_name property of r, which is actually a reference. What we’re experiencing here is another usability feature of the Rust compiler. It turns out the .-operator performs the dereferencing implicitly, if needed! If there’s one more thing that should be talked about when it comes to references in Rust, it’s probably its safety and lifetime characteristics. You can read more about that in our article about Lifetimes in Rust!"]
    },
    {
      "id": 5,
      "title": "How to RxJS in Angular",
      "description": "As the values of your component inputs change over time, you may want to do something with that data inside your component.",
      "img": "img/article2.png",
      "author": "Dominic Elm",
      "date": "July 4, 2021",
      "tags": ["SAP ABAP", "Programmer", "SAP TM Consultant"],
      "subtitles": ["Advanced caching with RxJS", "Motivation", "The Requirements"],
      "text": ["When building web applications, performance should always be a top priority. There are many things we can do to speed up our Angular applications like tree-shaking, AoT (ahead-of-time compilation), lazy loading modules or caching. To get an overview of practices that will help you boost the performance of your Angular applications, we highly recommend you to check out the Angular Performance Checklist by Minko Gechev. In this post we focus on caching.",
        "Every now and then there’s this question popping up how to cache data in an Angular application that makes excessive use of Observables. Most people have a good understanding on how to cache data with Promises but feel overwhelmed when it comes to functional reactive programming, due to its complexity (large API), fundamental shift in mindset (from imperative to declarative) and the multitude of concepts. Hence, it can be hard to actually translate an existing caching mechanism based on Promises to Observables, especially if you want that mechanism to be a little bit more advanced.",
        "Before we dive into code, let’s start to define the requirements for our advanced caching mechanism. We want to build an application called World of Jokes. It’s a simple app that randomly shows jokes for a given category. To keep it simple and focused, there’s only one category. This app has three components: AppComponent, DashboardComponent and JokeListComponent.The AppComponent is our entry point and renders a toolbar as well as a <router-outlet> that is filled based on the current router state. The DashboardComponent simply shows a list of categories. From here, we can navigate to the JokeListComponent which then renders a list of jokes onto the screen."]
    },
    {
      "id": 6,
      "title": "Top 15 Features of Angular",
      "description": "It has added the information for the dependency and also regarding the ng-content selections for the data.",
      "img": "img/article3.png",
      "author": "Adam Smith",
      "date": "June 17, 2021",
      "tags": ["Angular", "Programmer", "SAP ABAP"],
      "subtitles": ["Addition of Dependency Injection","Merging of Multiple Transition File",
        "Generic with ModuleWithProviders"],
      "text": ["It has added the information for the dependency and also regarding the ng-content selections for the data. It helps in wrapping the ng content selections and can help in checking files by creating scripts and using various interfaces. This would help us provide additional data that can be used in tools like Angular language services, which offers the functionality to offer suggestions and hints for the components or methods pre-defined in built-in libraries.",
        "Following the convention, earlier, it was possible to merge only one translation file per program. But, after the release of new features of Angular 10, it is possible to combine multiple files in a single go. Also, this transaction of the files will be made possible via messaging functionalities.",
        "Ihe use of generic keywords has been made mandatory with the ModuleWithProviders in this version of Angular 10. This requirement has aroused to make the ModuleWithProviders patterns work with the Ivy compiling and rendering sequence. Before this implementation, the View layer of the MVC architecture has provided the facility with the ability to omit the generic keyword to be used with the ModuleWithProviders. Again, a developer may want to use the View layer, and that might be dependent on the library that needs a generic type parameter to be included. Here, ngcc could be of no help, and only the application logic code would be migrated, resulting in the library’s fixation by its native author.To prevent this, skipLibChecks can be disabled by setting its binary value to false in config or while application update for using Ivy."]
    },
    {
      "id": 7,
      "title": "Angular team streamlines feature requests",
      "description": "Feature requests will be reviewed for alignment with existing projects on the Angular roadmap.",
      "img": "img/article4.png",
      "author": "Michael Willson",
      "date": "March 8, 2020",
      "tags": ["Product Development", "DevOps", "Python", "Android" ],
      "subtitles": ["References in Rust", "What are references again?", "Dereferencing References" ],
      "text": ["If you’ve read our article on Rust’s Ownership or if you’ve written your first few programs and wondered what’s the difference between String and &str, you’re most likely aware that there’s the notion of references in Rust. References enable us to give things like functions an data structures access to values, without transferring ownership. Or, in other words, without moving them. In this article we’re going to explore references a bit further and take a closer look at some interesting characteristics.",
        "While it may occur unexpected, it actually makes perfect sense. Rust claims to be memory safe and one of the things that make this claim true, is that there can’t be multiple mutable references to the same data. Allowing multiple such references in different parts of the code, there’d be no guarantee that one of them won’t mutate the data in an unexpected way.On the other hand though, it’s possible to have as many shared references of the same data as needed. So assuming p and r aren’t mutable, doing this would be totally fine.",
        "Notice that, even though we’re working with a reference, we didn’t have to use the *-operator to access the first_name property of r, which is actually a reference. What we’re experiencing here is another usability feature of the Rust compiler. It turns out the .-operator performs the dereferencing implicitly, if needed! If there’s one more thing that should be talked about when it comes to references in Rust, it’s probably its safety and lifetime characteristics. You can read more about that in our article about Lifetimes in Rust!"]
    },
    {
      "id": 8,
      "title": "High quality",
      "description": "Straightforward APIs with consistent cross platform behaviour..",
      "img": "img/article1.png",
      "author": "Pascal Precht",
      "date": "02022017",
      "tags": ["Angular", "Design", "Java", "DevOps"],
      "subtitles": ["Making your Angular apps fast",
        "Measuring the app’s performance",
        "Using a simpler NgFor"],
      "text": ["Angular claims to be very fast by default. What does “fast” really mean? Of course, this always depends on the context. What does our application do? How many different things is it doing at a certain point? How is our application’s component tree structured and how many bindings does it introduce? This and other questions come into play when trying to figure out, how we can make our applications faster.",
        "We’re interested in runtime performance and how long it takes Angular to perform a task when the mousemove event has been fired, as this is the work Angular has to do when we drag and drop a box. Measuring these kind of things nowadays is fairly easy. Chrome’s devtools for example come with an excellent Timeline Tool that lets us profile JavaScript execution and paint times per frame in the browser with a couple of mouse clicks.",
        "Another thing that is rather not obvious in our demo, is that NgFor might take up more time than it should. Now, what does that mean? Well, if we take a look at NgFor’s source code, we can see that it not only creates DOM items it iterates through, it also keeps track of the position of each item, in case things have been moved around. This is great for animations as we can animate-in and -out naturally."]
    }
  ]
}